PAGUA	EQU	P0.7
PVASO	EQU	P1.3
SEL0	EQU	P1.5
SEL1	EQU	P1.6
SEL2	EQU	P1.7
CALENTADO EQU	P2.7
SA	EQU	P3.0
SV	EQU	P3.1
GCAFE	EQU	P3.2
VAL_CAFE  EQU	P3.3
VAL_LECHE EQU	P3.6
GDESC	EQU	P3.7
ESTADO	EQU	0X20
EVENTO	EQU	0X21
NUM1	EQU	0x22
NUM2	EQU	0x23
SEGUNDOS EQU	0x26
FMONEDAS EQU	0x27
FCANTIDAD EQU	0x28.0
FADC	EQU	0x28.1
FPESO	EQU	0x28.2
TICK1S	EQU	0x28.3
FTEMP	EQU	0x28.4
REFRESH	EQU	0x28.5
BEBIDA	EQU	0x29
CANTIDAD EQU	0x2A
CONT1	EQU	0x2B
CONT2	EQU	0x2C
DIS1	EQU	0x2D
DIS2	EQU	0x2E
ADCON	EQU	0xC5
ADCH	EQU	0xC6
PWMP	EQU	0xFE
PWM0	EQU	0xFC
IEN0	EQU	0xA8

ORG 0X00
	AJMP INICIO

ORG 0X80
INICIO:
	ACALL INIT
PRINCIPAL:
	ACALL FSM
	AJMP PRINCIPAL
INIT:
	MOV ESTADO,#0
	MOV EVENTO,#0
	MOV SEGUNDOS,#0
	MOV FMONEDAS,#0
	CLR FCANTIDAD
	CLR FADC
	CLR FPESO
	CLR TICK1S
	CLR FTEMP
	MOV BEBIDA,#0
	MOV CANTIDAD,#0
	MOV CONT1,#0
	MOV CONT2,#0
	CLR VAL_CAFE
	CLR VAL_LECHE
	CLR PAGUA
	CLR PVASO
	CLR GCAFE
	CLR GDESC
	CLR CALENTADO
	;timer
	ORL TMOD, #00000010b
	ANL TMOD, #11110010b
	ACALL ENCENDER_TIMER
	ACALL ACTUALIZAR_DISPLAY
	ACALL REFR
	RET
FSM:
	MOV A,ESTADO
	RL A
	MOV DPTR,#EST_TABL
	JMP @A+DPTR
EST_TABL:
	AJMP ESTADO0
	AJMP ESTADO1
	AJMP ESTADO2
	AJMP ESTADO3
	AJMP ESTADO4
	AJMP ESTADO5
	AJMP ESTADO6
	AJMP ESTADO7
	AJMP ESTADO8
;*******************************************estado0
ESTADO0:
	ACALL GEN_EVE0
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV0_TABL
	JMP @A+DPTR
EV0_TABL:
	AJMP EV0
	AJMP EV01
	AJMP EV02
	AJMP EV03
	AJMP EV04
	AJMP REFR
GEN_EVE0:
	JBC REFRESH,COND05
	CLR A	; meter SEL0..2 en A
	MOV C,SEL2
	RLC A
	MOV C,SEL1
	RLC A
	MOV C,SEL0
	RLC A
	XRL A,BEBIDA
	CLR C
	SUBB A,#0
	JNZ COND01 ; (SEL xor bebida) != 0 (se ha cambiado la bebida seleccionada)
	MOV A,P1 ; meter C(5,10,20) en A
	ANL A,#00000111b
	XRL A,FMONEDAS
	CLR C
	SUBB A,#0
	JNZ COND02 ; C(5,10,20) xor Fmonedas alguno != 0 (ha metido una moneda)
	MOV C,SV
	ANL C,FCANTIDAD
	JC COND03 ; SV and Fcantidad (Hay vaso y suficiente dinero)
	MOV C,FCANTIDAD
	ANL C,/SV
	JC COND04 ; SV=0 Fcantidad=1 (No hay vaso pero suficiente dinero)
	MOV EVENTO,#0
	RET
COND01:
	MOV EVENTO,#1
	RET
COND02:
	MOV EVENTO,#2
	RET
COND03:
	MOV EVENTO,#3
	RET
COND04:
	MOV EVENTO,#4
	RET
COND05:
	MOV EVENTO,#5
	RET
EV0:
	RET
EV01:
	ACALL ELEGIR_BEBIDA
	ACALL COMPROBAR_CANTIDAD
	ACALL ACTUALIZAR_DISPLAY
	RET
EV02:
	ACALL AUMENTAR_CANTIDAD
	ACALL COMPROBAR_CANTIDAD
	ACALL ACTUALIZAR_DISPLAY
	RET
EV03:
	ACALL CARGAR_CAFE
	MOV ESTADO,#2
	CLR FCANTIDAD
	MOV CANTIDAD,#0
	MOV FMONEDAS,#0
	ACALL ACTUALIZAR_DISPLAY
	RET
EV04:
	SETB PVASO
	MOV ESTADO,#1
	CLR FCANTIDAD
	MOV CANTIDAD,#0
	MOV FMONEDAS,#0
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado1
ESTADO1:
        ACALL GEN_EVE1
        MOV A,EVENTO
        RL A
        MOV DPTR,#EV1_TABL
        JMP @A+DPTR
EV1_TABL:
        AJMP EV0
        AJMP EV11
	AJMP REFR
GEN_EVE1:
	JBC REFRESH,COND12
	JNB SV,COND11 ; SV == 0
	MOV EVENTO,#0X1
	RET
COND11:
	MOV EVENTO,#0X0
	RET
COND12:
	MOV EVENTO,#2
	RET
EV11:
	CLR PVASO
	ACALL CARGAR_CAFE
	MOV ESTADO,#2 
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado2
ESTADO2:
	ACALL GEN_EVE2
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV2_TABL
	JMP @A+DPTR
EV2_TABL:
	AJMP EV0
	AJMP EV21
	AJMP EV22
	AJMP REFR
GEN_EVE2:
	JBC REFRESH,COND23
	JB FADC,COND21 ; FADC == 1
	JB FPESO,COND22 ; FPESO == 1
	MOV EVENTO,#0
	RET
COND21:
	MOV EVENTO,#1
	RET
COND22:
	MOV EVENTO,#2
	RET
COND23:
	MOV EVENTO,#3
	RET
EV21:
	ACALL PESAR_CAFE
	RET
EV22:
	CLR FPESO
	CLR GCAFE
	CLR GDESC
	ACALL MOLER_CAFE
	MOV ESTADO,#3
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado3
ESTADO3:
	ACALL GEN_EVE3
	MOV A,EVENTO
        RL A
        MOV DPTR,#EV3_TABL
	JMP @A+DPTR

EV3_TABL:
	AJMP EV0
	AJMP EV31
	AJMP EV32
	AJMP REFR
GEN_EVE3:
	JBC REFRESH,COND33
	MOV A,#0X3
	CLR C
	SUBB A,SEGUNDOS
	JZ COND31 ; SEGUNDOS == 3
	JB TICK1S,COND32 ; TICK1S == 1
	MOV EVENTO,#0
	RET
COND31:
	MOV EVENTO,#0X01
	RET
COND32:
	MOV EVENTO,#0X02
	RET
COND33:
	MOV EVENTO,#03
	RET
EV31:
	ACALL PARAR_MOLINILLO
	SETB PAGUA
	MOV ESTADO,#4
	ACALL ACTUALIZAR_DISPLAY
	RET
EV32:
	CLR TICK1S
	INC SEGUNDOS
	RET
;*******************************************estado4
ESTADO4:
	ACALL GEN_EVE4
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV4_TABL
	JMP @A+DPTR
EV4_TABL:
	AJMP EV0
	AJMP EV41
	AJMP REFR
GEN_EVE4:
	JBC REFRESH,COND42
	MOV A,#0
	MOV C,SA
	RLC A
	MOV EVENTO,A
	RET
COND42:
	MOV EVENTO,#2
	RET
EV41:
	CLR PAGUA
	ACALL EMPEZAR_CALENTADO
	MOV ESTADO,#5
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado5
ESTADO5:
	ACALL GEN_EVE5
	MOV A,EVENTO
        RL A
        MOV DPTR,#EV5_TABL
	JMP @A+DPTR
EV5_TABL:
	AJMP EV0
	AJMP EV51
	AJMP EV52
	AJMP REFR
GEN_EVE5:
	JBC REFRESH,COND53
	JBC FADC,COND51 ; FADC == 1
	JBC FTEMP, COND52 ; FTEMP == 1
	AJMP COND50
	RET
COND50:
	MOV EVENTO,#0X0
	RET
COND51:
	MOV EVENTO,#0X1
	RET
COND52:
	MOV EVENTO,#0X2
	RET
COND53:
	MOV EVENTO,#3
	RET
EV51:
	ACALL COMPROBAR_TEMPERATURA
	RET
EV52:
	CLR FTEMP
	CLR CALENTADO
	ACALL SERVIR_CAFE
	MOV ESTADO,#0X6
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado6
ESTADO6:
	ACALL GEN_EVE6
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV6_TABL
	JMP @A+DPTR
EV6_TABL:
	AJMP EV0
	AJMP EV61
	AJMP EV62
	AJMP EV63
	AJMP REFR
GEN_EVE6:
	JBC REFRESH,COND64
	; si los 2 primeros bits de bebida son distnitos
	; y segundos = 4
	MOV A,BEBIDA
	ANL A,#00000010b
	RR A
	XRL A,bebida
	ANL A,#00000001b ; A.0 = bebida.0 xor bebida.1
	MOV R0,A
	MOV A,#4
	CLR C
	SUBB A,SEGUNDOS
	JZ SEGUNDOS4 ; SEGUNDOS == 4
	JBC TICK1S,COND63 ; TICK1S == 1
	MOV EVENTO,#0
	RET
SEGUNDOS4:
	MOV A,R0
	DEC A
	JZ COND61 ; R0 == 1 (R0 = BEBIDA.0 XOR BEBIDA.1)
	AJMP COND62
COND61:
	; la bebida requiere leche
	MOV EVENTO,#1
	RET
COND62:
	; la bebida no requiere leche
	MOV EVENTO,#2
	RET
COND63:
	MOV EVENTO,#3
	RET
COND64:
	MOV EVENTO,#4
	RET
EV61:
	CLR VAL_CAFE
	ACALL SERVIR_LECHE
	MOV ESTADO,#7
	ACALL ACTUALIZAR_DISPLAY
	RET
EV62:
	CLR VAL_CAFE
	MOV ESTADO,#8
	ACALL ACTUALIZAR_DISPLAY
	RET
EV63:
	INC SEGUNDOS
	RET
;*******************************************estado7
ESTADO7:
	ACALL GEN_EVE7
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV7_TABL
	JMP @A+DPTR
EV7_TABL:
	AJMP EV0
	AJMP EV71
	AJMP EV72
	AJMP REFR
GEN_EVE7:
	JBC REFRESH,COND73
	JB TICK1S,COND71 ; TICK1S == 1
	MOV A,SEGUNDOS
	JZ COND72 ; SEGUNDOS == 0
	MOV EVENTO,#0
	RET
COND71:
	MOV EVENTO,#0X1
	RET
COND72:
	MOV EVENTO,#0X2
	RET
COND73:
	MOV EVENTO,#3
EV71:
	CLR TICK1S
	DEC SEGUNDOS
	RET
EV72:
	CLR VAL_LECHE
	MOV ESTADO, #0X8
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************estado8
ESTADO8:
	ACALL GEN_EVE8
	MOV A,EVENTO
	RL A
	MOV DPTR,#EV8_TABL
	JMP @A+DPTR
EV8_TABL:
	AJMP EV0
	AJMP EV81
	AJMP REFR
GEN_EVE8:
	JBC REFRESH,COND82
	JNB SV,COND81 ; SV == 0
	MOV EVENTO,#0
	RET
COND81:
	MOV EVENTO,#1
	RET
COND82:
	MOV EVENTO,#2
	RET
EV81:
	MOV ESTADO,#0
	ACALL ACTUALIZAR_DISPLAY
	RET
;*******************************************acciones
;*********begin ACTUALIZAR_DISPLAY
ACTUALIZAR_DISPLAY:
	MOV A,ESTADO
	JZ DISPLAYESTADO0
	ACALL DISPLAYBEBIDA
	ACALL DISPLAYESTADO
	RET
REFR:
	MOV A,P0
	ANL A,#10000000b
	JB CONT2.0, DISP1
	AJMP DISP2
DISP1:
	ORL P2,#00000001b
	ORL DIS1,A
	MOV P0,DIS1
	RET
DISP2:
	ANL P2,#11111110b
	ORL DIS2,A
	MOV P0,DIS2
	RET
DISPLAYESTADO0:
	MOV A,CANTIDAD
	CLR C
	SUBB A,#99
	JNC MOSTRAREE ; CANTIDAD > 99
	ADD A,#99
	ACALL PASAR_BCD
	MOV A,NUM2
	ACALL TABLA_CODIGOS
	MOV DIS1,A
	MOV A,NUM1
	ACALL TABLA_CODIGOS
	MOV DIS2,A
	RET
DISPLAYBEBIDA:
	MOV A, BEBIDA
	ACALL TABLA_BEBIDA
	ACALL TABLA_CODIGOS
	MOV DIS1,A
	RET
DISPLAYESTADO:
	MOV A, ESTADO
	ACALL TABLA_ESTADOS
	MOV R0,A ; si bebida no tiene leche restar 1 estado
	MOV A,BEBIDA
	ANL A,#00000011b
	CLR C
	CJNE A,#3,CONLECHE ; BEBIDA[1..0] != 3
	MOV A,R0
	JZ CONLECHE ; ESTADO8 y sin leche tampoco tiene que restar
	DEC R0
CONLECHE:
	MOV A,R0
	ACALL TABLA_CODIGOS
	MOV DIS2,A
	RET
MOSTRAREE:
	MOV DIS1,#01111001B
	MOV DIS2,#01111001B
	RET
PASAR_BCD:
	MOV NUM1,#0
	MOV NUM2,#0
BUCLE_BCD:
	CLR C
	SUBB A,#10
	JC TERMINAR_BCD ; A < 10
	INC NUM2
	AJMP BUCLE_BCD
TERMINAR_BCD:
	ADD A,#10
	MOV NUM1,A
	RET
TABLA_CODIGOS:
	INC A
	MOVC A,@A+PC
	RET
	DB 00111111b
	DB 00000110B
	DB 01011011B
	DB 01001111B
	DB 01100110b
	DB 01101101B
	DB 01111101B
	DB 00000111B
	DB 01111111B
	DB 01100111B
TABLA_BEBIDA:
	INC A
	MOVC A,@A+PC
	RET
	DB 0
	DB 1
	DB 2
	DB 3
	DB 0
	DB 4
	DB 5
	DB 6
TABLA_ESTADOS:
	INC A
	MOVC A,@A+PC
	RET
	DB 8;ESTADO0
	DB 7
	DB 6
	DB 5
	DB 4
	DB 3
	DB 2
	DB 1
	DB 0
;*********end ACTUALIZAR_DISPLAY
;*********begin AUMENTAR_CANTIDAD
AUMENTAR_CANTIDAD:
	;cargar en R0 el puerto de las monedas
	MOV A,P1
	ANL A,#00000111b
	XRL A,FMONEDAS
	MOV R0,A
	MOV A,P1
	ANL A,R0
	ACALL TABLA_AUMENTO ;Guarda en A la cantidad a sumar
	ADD A,CANTIDAD
	MOV CANTIDAD,A
	MOV A,P1 ;actualiza los flags
	ANL A,#00000111b
	MOV FMONEDAS,A
	RET
TABLA_AUMENTO:
	INC A
	MOVC A,@A+PC
	RET
	DB 0	;000
	DB 5	;001 5c
	DB 10	;010 10c
	DB 15	;011 15c = 10c+ 5c
	DB 20	;100 20c
	DB 25	;101 25c = 20c + 5c
	DB 30	;110 30c = 20c + 10c
	DB 35	;111 35c = 20c + 10c + 5c
;*********end AUMENTAR_CANTIDAD
;*********begin COMPROBAR_CANTIDAD
COMPROBAR_CANTIDAD:
	MOV A,BEBIDA
	ACALL OBTENER_PRECIO
	JZ NO_HAY_SUFICIENTE ; BEBIDA == 0
	CLR C
	SUBB A,CANTIDAD
	JZ SUFICIENTE_CANT ; precio-CANTIDAD == 0 
	JNC NO_HAY_SUFICIENTE ; precio-CANTIDAD >= 0
SUFICIENTE_CANT:
	SETB FCANTIDAD
	RET
OBTENER_PRECIO:
	INC A
	MOVC A,@A+PC
	RET
	DB 0	;000
	DB 40	;001 con leche
	DB 35	;010 cortado
	DB 30	;011 solo
	DB 0	;100
	DB 40	;101 con leche
	DB 35	;110 cortado
	DB 30	;111 solo
NO_HAY_SUFICIENTE:
	RET
;*********end COMPROBAR_CANTIDAD
;*********begin CARGAR_CAFE
CARGAR_CAFE:
	;ANL IEN0,#00000000b
	ORL IEN0,#11000000b
	ACALL PEDIR_PESO_ADC
	JB BEBIDA.2,CARGAR_DESC ; BEBIDA.2 == 1
	SETB GCAFE
	RET
CARGAR_DESC:
	SETB GDESC
	RET
;*********end CARGAR_CAFE
;*********begin PESAR_CAFE
PESAR_CAFE:
	CLR FADC
	;ADCH>=20
	MOV A,ADCH
	CLR C
	SUBB A,#20
	JNC PESA10 ; ADCH >= 20
	ACALL PEDIR_PESO_ADC
	RET
PESA10:
	SETB FPESO
	RET
;*********end PESAR_CAFE
;*********begin ELEGIR_BEBIDA
ELEGIR_BEBIDA:
	MOV A,#0
	MOV C,SEL2
	RLC A
	MOV C,SEL1
	RLC A
	MOV C,SEL0
	RLC A
	
	MOV bebida,A
	RET
;*********end ELEGIR_BEBIDA
;*********begin PEDIR_PESO_ADC
PEDIR_PESO_ADC:
	; Elegir ADC 0 (peso)
	ANL ADCON,#11111000b
	; Epezar conversion
	ORL ADCON,#00001000b
	RET
;*********end PEDIR_PESO_ADC
;*********begin PEDIR_TEMPERATURA_ADC
PEDIR_TEMPERATURA_ADC:
	; Elegir ADC 1 (temperatura)
	ANL ADCON,#11111001b
	; Epezar conversion
	ORL ADCON,#00001001b
	RET
;*********end PEDIR_TEMPERATURA_ADC
;*********begin COMPROBAR_TEMPERATURA
COMPROBAR_TEMPERATURA:
	CLR FADC
	;temp>=90 -> MASQUE90
	;ADCH >= 230
	MOV A,ADCH
	CLR C
	SUBB A,#230
	JNC MASQUE90 ; ADCH >= 230
	ACALL PEDIR_TEMPERATURA_ADC
	RET
MASQUE90:
	SETB FTEMP
	RET
;*********end COMPROBAR_TEMPERATURA
;*********begin SERVIR_CAFE
SERVIR_CAFE:
	SETB VAL_CAFE
	MOV SEGUNDOS,#0
	ANL IEN0,#10000010b
	ACALL ENCENDER_TIMER
	RET
;*********end SERVIR_CAFE
;*********begin EMPEZAR_CALENTADO
EMPEZAR_CALENTADO:
	SETB CALENTADO
	ORL IEN0,#11000000b
	ACALL PEDIR_TEMPERATURA_ADC
	RET
;*********end EMPEZAR_CALENTADO
;*********begin ENCENDER_TIMER
ENCENDER_TIMER:
	ORL IEN0,#10000010b
	MOV TH0,#6 ;256-250 = 6
	MOV TL0,#6
	MOV CONT1,#0
	MOV CONT2,#0
	CLR TICK1S
	SETB TR0
	RET
;*********end ENCENDER_TIMER
;*********begin APAGAR_TIMER
APAGAR_TIMER:
	ANL IEN0,#00000000b
	CLR TR0
	CLR TICK1S
	RET
;*********end APAGAR_TIMER
;*********begin MOLER_CAFE
MOLER_CAFE:
	ANL IEN0,#10000010b ; deshabilitar interrupt adc
	ACALL ENCENDER_TIMER
	MOV PWMP,#1
	MOV PWM0,#179
	RET
;*********end MOLER_CAFE
;*********begin SERVIR_LECHE
SERVIR_LECHE:
	ACALL ENCENDER_TIMER
	SETB VAL_LECHE
	MOV A,BEBIDA
	RRC A
	JNC CORTADO ; BEBIDA.0 == 0
	; con leche
	MOV SEGUNDOS,#5
	RET
CORTADO:
	MOV SEGUNDOS,#2
	RET
;*********end SERVIR_LECHE
;*********begin PARAR_MOLINILLO
PARAR_MOLINILLO:
	MOV PWM0,#255
	MOV SEGUNDOS,#0
	RET
;*********end PARAR_MOLINILLO
;**********************************INTERRUPCION ADC
ORG 0x53
interrupt_ADC:
	SETB FADC
	RETI

;**********************************INTERRUPCION TIMER
ORG 0X0B
INTERRUPT_TIMER:
	PUSH PSW
	PUSH ACC
	INC CONT1
	MOV A,#127
	CLR C
	SUBB A,CONT1
	JNZ CONDTIMER ; 127 != CONT1
	MOV CONT1,#0
	INC CONT2
	SETB REFRESH
    MOV A,#63
	CLR C
	SUBB A,CONT2
	JNZ CONDTIMER ; 63 != CONT2
	MOV CONT2,#0
	SETB TICK1S
	POP ACC
	POP PSW
	RETI
CONDTIMER:
	POP ACC
	POP PSW
	RETI
END
